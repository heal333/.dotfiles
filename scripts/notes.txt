[CS]
backpressure: readable stream is faster than sending the result with response writable stream over the network
wraper function in nodejs: functioin(exports,require,module,__filename,__dirname){}

unary(1) binary(2) decimal(10) bi(nary digi)t 
4 2 1|
1 0 0:4
0 1 0:2

High level language -- (Machine code -- Assembly code)* -- Binary code.
                        * low level language


Constructor in is a special method that is invoked automatically at the time an object of a class is created. It is used to initialize the data members of new objects generally.
super can be used to refer immediate parent class instance variable.
super can be used to invoke immediate parent class method.
super() can be used to invoke immediate parent class constructor.

CDN = content delivery network

//javascript(synchronous, single-threaded,loosely typed )
execution context:
        An environment created by javascript engine to handle the transformation and execution of js code
      1.variable environment:variables and functions as key value pairs (memory allocation phase)
      2.thread of execution:(code execution phase)
on a function invokation a new execution context is created

Hoisting:
  Mechanism in JS where the variable declarations are moved to the top of the scope before execution.
  Therefore it is possible to call a function before initializing it. This happnes because execution context happnes in two phases.
  in the first phase variables will get initialized to undefined.

Whenever an execution context is created, a lexical environment is created. Lexical environment is the local memory along with the lexical environment of its parent.
Lexical as a term means in hierarchy or in sequence.
scope chain: chain of all lexical environment of parent environment

at the global level "this" points to the global object( window object in case of browsers).␍
anything that is not inside a function is the "global space".␍
whenever we create any variables or functions in the "global space", they get attached to the global object( window object in case of browsers).

a call stack is used to keep track of all execution context
only for a proper function delclaration the function defination is stored in the variable environment.
for a arrow function undefined is stored in the variable environment.(like a var variable)
at global context this refers to the window object.
scope: where i can access certain variable
let and const are hoisted on different memory space from global(for var)

Undefined: can be considered an Special Placeholder that gets assigned in the memory allocation phase to variable before any value is assigned to that variable
not defined: variable is not found in the scope chain


tdz:
  the zone between hoisting and declaration for let and const variables.
  accessing let and const before it is declared.
  ReferenceError: Cannot access 'm' before initialization

  syntax error ... violation of JS syntax
  type error ...  while trying to re-initialize const variable
  reference error ... while trying to access variable which is not there in global memory.

block also known as compound statements is used to combine multiple statements. enclosed in curly bracers. var is global/function scoped and let and const is block scoped

Closure: Function bundled with its lexical environment is known as a closure. Whenever function is returned,
  even if its vanished in execution context but still it remembers the reference it was pointing to. Even if the execution context from where a function is invoked
  is removed from the call stack the invoked function still remembers its REFERENCE to the lexical scope.
  use case:data hiding, module design pattern, currying, memoize, state in async, setTimeouts, cons: high memory ussage, closures arent garbase collected

let, const is block scoped so in each iteration of a loop a new copy (with new memory location) of the variable is attached with the iteration block

Function statement / Function Declaration: 
  The function is normally defined and can be used later on
Function expression: 
  The function is first created and assigned to a variable so that it can be called by its variable name and unless it is defined, it cannot be executed otherwise it throws out "Uncaught TypeError"
Anonymous function: 
  Function where there is no need to define name for the function, it just can be assigned to variable
Named function: 
  Normal function with its name assigned to a variable !!In this case you cannot call function by its name in outer scope!! (Scope Chain)

Firstclass function: Ability to use functions as values.


call - invoke a function directly by passing in the reference which points to this variable inside the function
apply - similar to call but arguments are passed as a list.
bind - returns the method for later use instead of invoking it.
these are also known as function borrowing




//React
react-dom(createRoot, createPortal) is for modifying the dom
react elements are just objects. Becomes html elements when we render it
order matters for multiple script tags
reactelement.render() will replace everything in the reactelement
react can work in specific part of an webpage
npm is NOT node package manager
bundler: vite, parcel, webpack(create-react-app uses this)
devDependency used in development phase only and not in production build
in package.json:
  ^(caret)  = Compatible with version, willl update to all future minor/patch verisons that are
              backwards-compatible without incrementing the mazor verison.
  ~(tilde)  = Approximately equivalent to version, will update future patch that area
              backwards-compatible without incrementing the minor version.
transitive dependency: indirect dependency.
every dependency has its own package.json btw.
HMR: Hot Module Replacement
tree shaking in percel
npx: executing an npm package
JSX: HTML-like syntax in js, bundler will transpile this code. (eg: the bable inside percel)
JSX => React.createElement => JS Object => HTML element(root.render)
JSX prevents cross site scripting(XSS) attacks btw
you can just execute a react component cause its just an function
config driven UI
list of elements needs a key property to identify it uniquely and add new element in that list for optimized rendering. So it dosent need to rerender every element in the list when a new element is added.
not reccomended to use index as a key otherwise it could cause order issue
default export and named export
hooks are javascript function provided by the react library
dom(document object model):tree like structure of the html elements
virtual-dom: representation of an actual dom.
optional chaining in js.
useState creates a local state variable in our functional component
useEffect without a dependency array is called after every render
if we return a function in useEffect that function is called when that componenent is unmounted;
Link behind the scenes is an anchor tag
life cycle of class componenent in React: 
1. Constructor (render phase)
2. render (render phase)
3. componentDidMount (commit phase) //this will execute after all child and all sibling component life cycle is done too cause optimization
4.componentDidUpdata //after every subsequent update
5.componentWillUnmount //just before unmounting

https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram

Lazy Loading/On demand loading/ dynamic import:
const ComponentWithLazyLoading = lazy(()=> import("path to the component"))
<Suspense fallback={temporary component}><ComponentWithLazyLoading /></Suspense>

higher order component: takes an component and returns an component

redux:
    dispatch an action to call a reducer function to add/change something in the redux store.
    subscribe to the redux store using a selector to get data form redux store.
    store a object to store states.
reducer function still returns a new immutable state but does this behind the scene(using immerjs)



//node.js
node.js Tyan Dahl, 2009 , initially known as web.js
node.js: cross platform, open-source, javascript runtime environment with event driven architecture and asynchronous I/O

ECMAScript is a standard for scripting language including js
js engine follows ECMAScript standard

global object in node.js is global (provided by environment)
  this refers to {} in node.js

global object in browser js is window. 
  this,self,window,frames refers to window object in browser

globalThis is the standard for all js runtime environment to refer to the global object.
module protects their variables and functions from leaking.
two types of module pattern:
        1.CommonJs modules: by default used in Node.js, synchronous, non-strict mode.
        2.Es modules(mjs) ESM: by default used in frameworks like react, asynchronous, strict mode. (newer)

all code inside require function is executed inside a wraper IIFE. module is a passed as argument in this IIFE. require does caching
(function(exports, require, module, __filename, __dirname) {
   // Module code 
});

node.js has 2 mazor parts:
        1.v8 JS engine: call stack,execution context,memory heap, garbage collector
        2.libuv(multi-platform C library for asynchronous I/O):event loop, callback queue, thread pool

event loop:
      A loop that keeps checking the callstack and if the callstack is empty push functions from callback queue to the call stack.
      phase:
            1.timer:  setTimeouts and setIntervals are executed
            2.poll: I/O callback, incoming connections,data,fs,crypto,http,get
            3.check: setImmediate
            4.close:socket.on("close")
                loop to start.
      before every phase(timer,poll......etc):
                process.nextTick()(highest priority, runs recursively), pormise callbacks loop
      when event loop has nothing to do it waits at the poll phase

v8 engine steps: (jit)
      A.parsing
        1.lexical analysis(tokenization)
        2.Syntax analysis(creating AST:a kind of tree representation of the abstract syntactic structure of source,relationship between tokens)
      B.Interpreter
        1.ignition Interpreter converts AST to Byte code.
        2.turbofan compiler compiles some code to machine code too for optimization purpose.
v8 engine also does garbage collection(orinoco,oil pan,scavenger) using mark and sweep algo.

[CONFIG]
currentMax = 5620000,5568000,5583000,5578000,5555000


[MATH]
3median = mode +2mean
mode can be multivalued  & cant be 1
need mean for standard deviation. 
standard deviation = root of average of squered differance between mean and element
variance = standard deviations**2
for 9n squered: jitne 9 unse 1 kam 9, jitne 9 unse 1 kam 0, bich me 81 laga dena mere hero
for 9n cubed: jitne 9 unse 1 kam 9, jitne 9 unse 1 kam 0, bich me 72 laga dena mere hero, end with jitne 9.
square of 9 1s (111111111) = 12345678987654321
dividend = (divisior*quotient) + remainder

divisibility rules:
  4: last 2 digit should be divilible by 4 or should be 00
  7:
  8:last 3 digits should be dibisible by 8 or should be 000
  9:the sum of all the digits of the number should be divisible by 9
  11:the difference of the odd sum and even sum of the digits of a number is divisible by 11

interior angles sum = (n-2)*180
interior angles(regular figure) = interior angles sum / n

area of equilataral triangle = (root(3)/4)*a**2

inradius = area/semi perimeter
circumradious = product of sides/(4*area)

for right angle triangle:
  inradius = (base+perpendicular-hypoteneaus)/2
  circumradious = hypoteneaus/2
  
for equilataral triangle:
  inradius = a/(2*root(3))
  inradius = height/3
  circumradious = a/root(3)

equilataral relations

0.13636363636..... = (136-1)/990

avg speed for the same distance 3/(1/s1 + 1/s2 + 1/s3)

first n odd numbers avg = number
first n even numbers avg = n+1
first n natural numbers avg = (n+1)/2




